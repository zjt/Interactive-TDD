#!/usr/bin/env perl

# watches for any changes in your development directory
# and then runs a command, such as run your unit test suite
# and outputs the results either to the terminal or to growl

use strict;
use warnings;

use AnyEvent::Filesys::Notify;
use AnyEvent::Impl::Perl;
use Getopt::Long;
use IPC::Open3::Utils;

my $growl_ok = 0;
eval { require Growl::Any; }; $growl_ok = 1 unless $@;

# options with defaults
my $dirs         = "lib,t";
my $interval     = 0.5;
my $filter       = '\.(swp|tmp)$';
my $exec         = "prove -Ilib t";
my $exec_timeout = 15;
my $quit_timeout = 10000;
my $growl        = $growl_ok;
my $growl_icon   = "http://st.pimg.net/perlweb/images/icons/onion.vee5cb98.png";
my $growl_lines  = 20;

my $growl_title;
$SIG{ALRM}       = sub { die "alarm\n" };

GetOptions(
    "dirs=s"         => \$dirs,
    "interval=i"     => \$interval,
    "filter=s"       => \$filter,
    "exec=s"         => \$exec,
    "exec_timeout=i" => \$exec_timeout,
    "quit_timeout=i" => \$quit_timeout,
    "growl=s"        => \$growl,
    "growl_icon=s"   => \$growl_icon,
    "growl_lines=i"  => \$growl_lines,
);

# output a startup message
output( <<END
$0
\t--dirs $dirs
\t--interval $interval
\t--filter '$filter'
\t--growl $growl
\t--exec '$exec'
\t--exec_timeout '$exec_timeout'
\t--quit_timeout '$quit_timeout'
\t--growl_icon '$growl_icon'
\t--growl_lines '$growl_lines'
\n
END
);

# set the inactivity timer
alarm $quit_timeout;

# set up the monitoring of the directories for changed files
my $notifier = AnyEvent::Filesys::Notify->new(
    dirs     => [ split(',', $dirs) ],
    interval => $interval,
    filter   => sub { shift !~ /$filter/ },
    cb       => sub {

        # get a title for the growl output
        for ( @_ ) {
            $growl_title = $_->path;
        }

        # the growl title will get truncated
        if ( length $growl_title > 30 ) {
            ($growl_title) = $growl_title =~ /.*(.{28})$/;
            $growl_title = "..$growl_title";
        }

        # run the command and capture the output (STDOUT and STDERR)
        my @output = ();
        put_cmd_in($exec, \@output, { timeout => $exec_timeout } );

        # output the results of the command
        output(@output);

        # reset inactivity timer
        alarm $quit_timeout;
    },
);

AnyEvent::Impl::Perl::loop();

# outputs the results to console and/or growl
sub output {

    my @output = @_;

    if ( ! $growl or $growl eq "both" ) {
        print @output;
        print "\n";
    }

    if ( $growl ) {
        require Growl::Any;
        my $growl = Growl::Any->new(appname => "interact", events => ["event1"]);
        while(my @out = splice(@output,0,$growl_lines)) {
            $growl->notify("event1", $growl_title, join("",@out), $growl_icon);
        }
    }

}
